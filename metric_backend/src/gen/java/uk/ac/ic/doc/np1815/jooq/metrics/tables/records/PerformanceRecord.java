/*
 * This file is generated by jOOQ.
 */
package uk.ac.ic.doc.np1815.jooq.metrics.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

import uk.ac.ic.doc.np1815.jooq.metrics.tables.Performance;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PerformanceRecord extends UpdatableRecordImpl<PerformanceRecord> implements Record2<String, Double> {

    private static final long serialVersionUID = 1659753860;

    /**
     * Setter for <code>metrics.performance.file_name</code>.
     */
    public void setFileName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>metrics.performance.file_name</code>.
     */
    public String getFileName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>metrics.performance.average_performance</code>.
     */
    public void setAveragePerformance(Double value) {
        set(1, value);
    }

    /**
     * Getter for <code>metrics.performance.average_performance</code>.
     */
    public Double getAveragePerformance() {
        return (Double) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<String, Double> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<String, Double> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Performance.PERFORMANCE.FILE_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field2() {
        return Performance.PERFORMANCE.AVERAGE_PERFORMANCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getFileName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double component2() {
        return getAveragePerformance();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getFileName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value2() {
        return getAveragePerformance();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PerformanceRecord value1(String value) {
        setFileName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PerformanceRecord value2(Double value) {
        setAveragePerformance(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PerformanceRecord values(String value1, Double value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PerformanceRecord
     */
    public PerformanceRecord() {
        super(Performance.PERFORMANCE);
    }

    /**
     * Create a detached, initialised PerformanceRecord
     */
    public PerformanceRecord(String fileName, Double averagePerformance) {
        super(Performance.PERFORMANCE);

        set(0, fileName);
        set(1, averagePerformance);
    }
}
